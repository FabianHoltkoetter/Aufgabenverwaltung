package de.gaia.tasks.aufgabenservice.service.services.businessactions;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import java.util.Arrays;
import java.util.HashSet;
import java.text.ParseException;
import de.gaia.tasks.aufgabenservice.service.gen.services.businessactions.TestDatenBusinessActionService;
import de.gaia.tasks.aufgabenservice.service.gen.domain.Prioritaet_;
import de.gaia.tasks.aufgabenservice.service.gen.domain.Mitarbeiter_;
import de.gaia.tasks.aufgabenservice.service.gen.rest.Mitarbeiter_Repository;
import de.gaia.tasks.aufgabenservice.service.gen.domain.Aufgabe_;
import de.gaia.tasks.aufgabenservice.service.gen.rest.Aufgabe_Repository;

import de.muenchen.service.security.UserInfo;

/**
 * Provides a service to execute business-actions.
 * If used as generated by GAIA this service will be autowired and called by BusinessActionController.
 */
@Service
public class TestDatenBusinessActionServiceImpl implements TestDatenBusinessActionService {
	// If you need access to the database you can autowire a Repository.
	// Repositories are generated into the package: .gen.rest
	//
	// @Autowired
	// <EntityName>Repository repo;
	@Autowired
	Mitarbeiter_Repository mitarbeiterRepo;
	@Autowired
	Aufgabe_Repository aufgabeRepo;

	public void testdatenErzeugen(){
		
		//insert example data for Mitarbeiter_
		Mitarbeiter_ mitarbeiter = new Mitarbeiter_();
		mitarbeiter.setName("Hans MÃ¼ller");
		mitarbeiter.setMail("hans@muenchen.de");
		mitarbeiter.setMandant(getCurrentMandant());
		mitarbeiter.setOid(1L);
		
		//insert example data for Aufgabe_
		Aufgabe_ aufgabe = new Aufgabe_();
		aufgabe.setBeschreibung("Gaia fertig bauen");
		aufgabe.setPrioritaet(Prioritaet_.niedrig);
		try {
			aufgabe.setFaelligAm(new java.text.SimpleDateFormat("dd.mm.yyyy").parse("12.12.2017"));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		aufgabe.setMandant(getCurrentMandant());
		aufgabe.setOid(1L);
		
		// Set relations
		aufgabe.setBearbeiter(new HashSet<>(Arrays.asList(mitarbeiter)));
		
		//Save all example Entities in an order that won't cause errors
		mitarbeiterRepo.save(mitarbeiter);
		aufgabeRepo.save(aufgabe);
		}
		
		public String getCurrentMandant() {
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			UserInfo principal = (UserInfo) auth.getPrincipal(); //get logged in username
			return principal.getTenant();
		}

}
